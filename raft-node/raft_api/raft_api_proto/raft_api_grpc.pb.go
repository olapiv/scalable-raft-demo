// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: raft_api.proto

package raft_api_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftApiClient is the client API for RaftApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftApiClient interface {
	// Not part of official Raft API
	IsPartOfCluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IsPartOfClusterReply, error)
	LeaderWithID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaderWithIDReply, error)
	AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*GenericReply, error)
	RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*GenericReply, error)
	DemoteVoter(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*GenericReply, error)
}

type raftApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftApiClient(cc grpc.ClientConnInterface) RaftApiClient {
	return &raftApiClient{cc}
}

func (c *raftApiClient) IsPartOfCluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IsPartOfClusterReply, error) {
	out := new(IsPartOfClusterReply)
	err := c.cc.Invoke(ctx, "/raft_api_proto.v1.RaftApi/IsPartOfCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftApiClient) LeaderWithID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LeaderWithIDReply, error) {
	out := new(LeaderWithIDReply)
	err := c.cc.Invoke(ctx, "/raft_api_proto.v1.RaftApi/LeaderWithID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftApiClient) AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/raft_api_proto.v1.RaftApi/AddVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftApiClient) RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/raft_api_proto.v1.RaftApi/RemoveServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftApiClient) DemoteVoter(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/raft_api_proto.v1.RaftApi/DemoteVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftApiServer is the server API for RaftApi service.
// All implementations must embed UnimplementedRaftApiServer
// for forward compatibility
type RaftApiServer interface {
	// Not part of official Raft API
	IsPartOfCluster(context.Context, *Empty) (*IsPartOfClusterReply, error)
	LeaderWithID(context.Context, *Empty) (*LeaderWithIDReply, error)
	AddVoter(context.Context, *AddVoterRequest) (*GenericReply, error)
	RemoveServer(context.Context, *RemoveServerRequest) (*GenericReply, error)
	DemoteVoter(context.Context, *RemoveServerRequest) (*GenericReply, error)
	mustEmbedUnimplementedRaftApiServer()
}

// UnimplementedRaftApiServer must be embedded to have forward compatible implementations.
type UnimplementedRaftApiServer struct {
}

func (UnimplementedRaftApiServer) IsPartOfCluster(context.Context, *Empty) (*IsPartOfClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPartOfCluster not implemented")
}
func (UnimplementedRaftApiServer) LeaderWithID(context.Context, *Empty) (*LeaderWithIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderWithID not implemented")
}
func (UnimplementedRaftApiServer) AddVoter(context.Context, *AddVoterRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoter not implemented")
}
func (UnimplementedRaftApiServer) RemoveServer(context.Context, *RemoveServerRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServer not implemented")
}
func (UnimplementedRaftApiServer) DemoteVoter(context.Context, *RemoveServerRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteVoter not implemented")
}
func (UnimplementedRaftApiServer) mustEmbedUnimplementedRaftApiServer() {}

// UnsafeRaftApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftApiServer will
// result in compilation errors.
type UnsafeRaftApiServer interface {
	mustEmbedUnimplementedRaftApiServer()
}

func RegisterRaftApiServer(s grpc.ServiceRegistrar, srv RaftApiServer) {
	s.RegisterService(&RaftApi_ServiceDesc, srv)
}

func _RaftApi_IsPartOfCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftApiServer).IsPartOfCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft_api_proto.v1.RaftApi/IsPartOfCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftApiServer).IsPartOfCluster(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftApi_LeaderWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftApiServer).LeaderWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft_api_proto.v1.RaftApi/LeaderWithID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftApiServer).LeaderWithID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftApi_AddVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftApiServer).AddVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft_api_proto.v1.RaftApi/AddVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftApiServer).AddVoter(ctx, req.(*AddVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftApi_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftApiServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft_api_proto.v1.RaftApi/RemoveServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftApiServer).RemoveServer(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftApi_DemoteVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftApiServer).DemoteVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft_api_proto.v1.RaftApi/DemoteVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftApiServer).DemoteVoter(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftApi_ServiceDesc is the grpc.ServiceDesc for RaftApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft_api_proto.v1.RaftApi",
	HandlerType: (*RaftApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsPartOfCluster",
			Handler:    _RaftApi_IsPartOfCluster_Handler,
		},
		{
			MethodName: "LeaderWithID",
			Handler:    _RaftApi_LeaderWithID_Handler,
		},
		{
			MethodName: "AddVoter",
			Handler:    _RaftApi_AddVoter_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _RaftApi_RemoveServer_Handler,
		},
		{
			MethodName: "DemoteVoter",
			Handler:    _RaftApi_DemoteVoter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft_api.proto",
}
